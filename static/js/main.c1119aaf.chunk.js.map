{"version":3,"sources":["Components/Card/Card.js","Components/PokemonList/PokemonList.js","action-types/pokemons.js","api/utils.js","api/api.js","action-creators/pokemons.js","Components/Loading.js","Components/SearchBar.js","pages/Index.js","App.js","serviceWorker.js","reducers/index.js","reducers/pokemons.js","index.js"],"names":["Card","poke","this","props","pokemon","addedClassName","path","searchTerm","id","isSelectedCard","react_default","a","createElement","className","react_router_dom","to","src","sprites","front_default","alt","name","types","map","t","key","slot","type","evolves_from_species","Component","PokemonList","pokemons","selectedCard","Card_Card","actionTypes","SELECT_CARD","SEARCH","SET_LIST","LOADING_DATA","SET_NAME_LIST","LOADING_NAMES_DATA","SET_ROUTE_MATCH","checkStatus","response","status","error","Error","parseJSON","json","api","getPokemonNames","fetch","API_DOMAIN","method","then","getPokemonData","url","getEvolvesFrom","actions","selectCard","pokemonId","payload","loadPokemonNames","dispatch","store","loadingNamesData","loading","list","results","window","localStorage","setItem","JSON","stringify","length","search","matchNames","toLowerCase","value","pokemonNames","filter","p","match","loadPokemons","slice","pokemonRequest","showSearch","forEach","pokeData","parse","getItem","e","pokeDetailResponse","species","evolvesResponse","routeMatch","pokeId","setRouteMatch","Loading","SearchBar","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","checkPathSearchTerm","prevProps","prevState","snapshot","params","target","placeholder","onChange","mapDispatchToProps","pokemonActions","withRouter","connect","state","Index","loadSelectedCard","parseInt","history","push","loadingData","Components_SearchBar","Components_Loading","PokemonList_PokemonList","App","react_router","exact","component","Boolean","location","hostname","initialState","arguments","undefined","action","update","$set","createBrowserHistory","createStore","combineReducers","router","connectRouter","applyMiddleware","thunk","routerMiddleware","ReactDOM","render","es","esm","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1119aaf.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport {Link} from \"react-router-dom\";\n\nexport default class Card extends Component{\n    render(){\n        let poke = this.props.pokemon,\n            addedClassName = '',\n            path = '/pokemon/' + this.props.searchTerm + '/' + poke.id;\n\n        if(this.props.isSelectedCard){\n            addedClassName = ' selected';\n            path = '/';\n        }\n\n        return (\n            <div className={\"col-4\" + addedClassName}>\n                <Link to={path} className=\"card mb-2\">\n                    <div className=\"image\">\n                        <img src={poke.sprites.front_default} alt={poke.name}/>\n                        <div className=\"poke-id\">ID / {poke.id}</div>\n                    </div>\n                    <div className=\"info\">\n                        <h3>{poke.name}</h3>\n                        <div className=\"types\">\n                            {poke.types.map(t => <div key={t.slot} className=\"type\">{t.type.name}</div>)}\n                        </div>\n                        {poke.evolves_from_species &&\n                            <div className=\"evolution-from\">\n                                Evoluciona de:\n                                <span>{poke.evolves_from_species}</span>\n                            </div>\n                        }\n                    </div>\n                </Link>\n            </div>\n        );\n    }\n}","import React from 'react';\nimport Card from \"../Card/Card\";\n\nfunction PokemonList(props){\n    if(!props.pokemons){\n        return null;\n    }\n\n    return(\n        <div className={\"row mt-2\" + (props.selectedCard? ' selected-pokemon' : '')}>\n            {props.pokemons.map(poke => <Card key={poke.id}\n                                              pokemon={poke}\n                                              isSelectedCard={props.selectedCard === poke.id}\n                                              searchTerm={props.searchTerm}/>)}\n        </div>\n    );\n}\n\nexport default PokemonList;","const actionTypes = {\n    SELECT_CARD: 'pokemons_select_card',\n    SEARCH: 'pokemons_search',\n    SET_LIST: 'pokemons_set_list',\n    LOADING_DATA: 'pokemons_loading_data',\n    SET_NAME_LIST: 'pokemons_set_name_list',\n    LOADING_NAMES_DATA: 'pokemons_loading_names_data',\n    SET_ROUTE_MATCH: 'pokemons_set_route_match'\n};\n\nexport default actionTypes;","export const checkStatus = (response) => {\n    if(response.status < 300){\n        return response;\n    }else{\n        let error = new Error(response.status);\n        error.response = response;\n        throw error;\n    }\n};\n\nexport const parseJSON = (response) => {\n    return response.json();\n};","import {checkStatus, parseJSON} from \"./utils\";\n\nconst API_DOMAIN = 'https://pokeapi.co/api/v2';\n\nconst api = {\n    getPokemonNames: () => {\n        return fetch(API_DOMAIN + '/pokemon?offset=0&limit=1000', {\n            method: 'get'\n        }).then(checkStatus)\n            .then(parseJSON)\n    },\n    getPokemonData: (url) => {\n        return fetch(url, {\n            method: 'get'\n        }).then(checkStatus)\n            .then(parseJSON)\n    },\n    getEvolvesFrom: (url) => {\n        return fetch(url, {\n            method: 'get'\n        }).then(checkStatus)\n            .then(parseJSON)\n    }\n};\n\nexport default api;","import actionTypes from '../action-types/pokemons';\nimport api from '../api/api';\n\nconst actions = {\n    selectCard: (pokemonId) => ({\n        type: actionTypes.SELECT_CARD,\n        payload: {\n            pokemonId\n        }\n    }),\n\n    loadPokemonNames: () => {\n        return (dispatch, store) => {\n            if(!store().pokemons.loadingNamesData) {\n                dispatch({\n                    type: actionTypes.LOADING_NAMES_DATA,\n                    payload: {\n                        loading: true\n                    }\n                });\n\n                api.getPokemonNames().then(response => {\n                    dispatch({\n                        type: actionTypes.SET_NAME_LIST,\n                        payload: {\n                            list: response.results\n                        }\n                    });\n\n                    dispatch({\n                        type: actionTypes.LOADING_NAMES_DATA,\n                        payload: {\n                            loading: false\n                        }\n                    });\n\n                    window.localStorage.setItem('pokemonNames', JSON.stringify(response.results));\n                    if (store().pokemons.searchTerm.length > 0) {\n                        actions.search(store().pokemons.searchTerm)(dispatch, store);\n                    }\n                });\n            }\n        };\n    },\n\n    search: (searchTerm) => {\n        return (dispatch, store) => {\n            dispatch({\n                type: actionTypes.LOADING_DATA,\n                payload: {\n                    loading: true\n                }\n            });\n\n            searchTerm = searchTerm.toLowerCase();\n\n            dispatch({\n                type: actionTypes.SEARCH,\n                payload: {\n                    value: searchTerm\n                }\n            });\n\n            let matchNames;\n            if(searchTerm.length > 0) {\n                matchNames = store().pokemons.pokemonNames.filter(p => !!p.name.match(searchTerm));\n            }else{\n                matchNames = [];\n            }\n\n            actions.loadPokemons(matchNames.slice(0, 9))(dispatch, store);\n        };\n    },\n\n    loadPokemons: (pokemonRequest) => {\n        return (dispatch, store) => {\n            let pokemons = 0;\n\n            if(pokemonRequest.length === 0){\n                actions.showSearch()(dispatch, store);\n            }\n\n            pokemonRequest.forEach(poke => {\n                try {\n                    let pokeData = JSON.parse(window.localStorage.getItem(poke.url));\n\n                    if (pokeData && pokeData.id) {\n                        pokemons++;\n\n                        if(pokemons === pokemonRequest.length){\n                            actions.showSearch()(dispatch, store);\n                        }\n\n                        return;\n                    }\n                }catch (e) {\n\n                }\n\n                api.getPokemonData(poke.url).then(pokeDetailResponse => {\n                    api.getEvolvesFrom(pokeDetailResponse.species.url).then(evolvesResponse => {\n                        let pokeData = {\n                            id: pokeDetailResponse.id,\n                            name: pokeDetailResponse.name,\n                            sprites: pokeDetailResponse.sprites,\n                            types: pokeDetailResponse.types,\n                            evolves_from_species: evolvesResponse.evolves_from_species ? evolvesResponse.evolves_from_species.name : null\n                        };\n                        window.localStorage.setItem(poke.url, JSON.stringify(pokeData));\n\n                        pokemons++;\n\n                        if(pokemons === pokemonRequest.length){\n                            actions.showSearch()(dispatch, store);\n                        }\n                    });\n                });\n            });\n        };\n    },\n\n    showSearch: () => {\n        return (dispatch, store) => {\n            let matchNames,\n                searchTerm = store().pokemons.searchTerm,\n                pokemons = [],\n                routeMatch = true;\n\n            if(searchTerm.length > 0) {\n                matchNames = store().pokemons.pokemonNames.filter(p => !!p.name.match(searchTerm));\n\n                pokemons = matchNames.slice(0, 9).map(poke => {\n                    let pokeData = JSON.parse(window.localStorage.getItem(poke.url));\n\n                    if(pokeData && pokeData.id) {\n                        return pokeData;\n                    }else{\n                        return null;\n                    }\n                });\n\n                pokemons = pokemons.filter(p => p != null);\n\n                if(!pokemons){\n                    pokemons = [];\n                }\n\n                let pokeId = store().pokemons.selectedCard;\n                if(pokeId > 0 && pokemons.filter(p => p.id === pokeId).length === 0){\n                    routeMatch = false;\n                }\n            }\n\n            dispatch(actions.setRouteMatch(routeMatch));\n\n            dispatch({\n                type: actionTypes.SET_LIST,\n                payload: {\n                    list: pokemons\n                }\n            });\n\n            dispatch({\n                type: actionTypes.LOADING_DATA,\n                payload: {\n                    loading: false\n                }\n            });\n        };\n    },\n\n    setRouteMatch: (routeMatch) => ({\n        type: actionTypes.SET_ROUTE_MATCH,\n        payload: {\n            routeMatch\n        }\n    })\n};\n\nexport default actions;","import React from 'react';\n\nfunction Loading(){\n    return (\n        <div className=\"col-12\">\n            <div className=\"loading\">\n                <div/>\n                <div/>\n                <div/>\n            </div>\n        </div>\n    )\n}\n\nexport default Loading;","import React, {Component} from 'react';\nimport pokemonActions from \"../action-creators/pokemons\";\nimport {connect} from \"react-redux\";\nimport {withRouter} from \"react-router\";\n\nclass SearchBar extends Component{\n    constructor(props) {\n        super(props);\n        this.search = this.search.bind(this);\n        this.checkPathSearchTerm = this.checkPathSearchTerm.bind(this);\n    }\n\n    componentWillMount() {\n        this.checkPathSearchTerm();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.checkPathSearchTerm();\n    }\n\n    checkPathSearchTerm(){\n        if(this.props.match.params.searchTerm && this.props.searchTerm !== this.props.match.params.searchTerm){\n            this.props.search(this.props.match.params.searchTerm);\n        }\n    }\n\n    search(e){\n        this.props.search(e.target.value);\n        this.props.selectCard(0);\n    }\n\n    render(){\n        return (\n            <div className=\"row mt-1\">\n                <div className=\"search-box col-12\">\n                    <input type=\"text\"\n                           name=\"search-pokemon\"\n                           placeholder=\"Filtra pokemons por nombre...\"\n                           value={this.props.searchTerm}\n                           onChange={this.search}/>\n                </div>\n            </div>\n        )\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    searchTerm: state.pokemons.searchTerm\n});\n\nconst mapDispatchToProps = ({\n    search: pokemonActions.search,\n    selectCard: pokemonActions.selectCard\n});\n\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(SearchBar));","import React, {Component} from 'react';\nimport {connect} from \"react-redux\";\nimport PokemonList from \"../Components/PokemonList/PokemonList\";\nimport pokemonActions from \"../action-creators/pokemons\";\nimport Loading from \"../Components/Loading\";\nimport SearchBar from \"../Components/SearchBar\";\n\nclass Index extends Component{\n    constructor(props) {\n        super(props);\n        this.loadSelectedCard = this.loadSelectedCard.bind(this);\n    }\n\n    componentWillMount() {\n        this.loadSelectedCard();\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        this.loadSelectedCard();\n    }\n\n    loadSelectedCard(){\n        if(this.props.pokemonNames.length === 0){\n            this.props.loadPokemonNames();\n            return;\n        }\n\n        if(this.props.match.params.id) {\n            let id = parseInt(this.props.match.params.id, 10);\n            if (id > 0) {\n                if (this.props.selectedCard === 0) {\n                    this.props.selectCard(id);\n                }else if(!this.props.routeMatch){\n                    this.props.selectCard(0);\n                    this.props.history.push('/');\n                }\n            } else {\n                this.props.history.push('/');\n            }\n        }else if(this.props.selectedCard > 0){\n            this.props.selectCard(0);\n        }\n    }\n\n    render(){\n        if(this.props.loadingData || this.props.loadingNamesData){\n            return (\n                <div>\n                    <SearchBar/>\n                    <Loading/>\n                </div>\n            );\n        }\n\n        return(\n            <div>\n                <SearchBar/>\n                <PokemonList pokemons={this.props.pokemons} selectedCard={this.props.selectedCard} searchTerm={this.props.searchTerm}/>\n            </div>\n        );\n    }\n}\n\nconst mapStateToProps = (state) => ({\n    pokemonNames: state.pokemons.pokemonNames,\n    pokemons: state.pokemons.list,\n    selectedCard: state.pokemons.selectedCard,\n    loadingData: state.pokemons.loadingData,\n    searchTerm: state.pokemons.searchTerm,\n    routeMatch: state.pokemons.routeMatch\n});\n\nconst mapDispatchToProps = ({\n    selectCard: pokemonActions.selectCard,\n    loadPokemonNames: pokemonActions.loadPokemonNames\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Index);","import React, {Component} from 'react';\nimport {Route, Switch} from \"react-router\";\nimport Index from \"./pages/Index\";\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <div className=\"bg-upper-decoration\"/>\n                <div className=\"bg-upper-decoration right\"/>\n                <div className=\"bg-lower-decoration\"/>\n                <div className=\"bg-lower-decoration right\"/>\n\n                <div className=\"container\">\n                    <Switch>\n                        <Route exact path=\"/\" component={Index}/>\n                        <Route exact path=\"/pokemon/:searchTerm/:id\" component={Index}/>\n                    </Switch>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {combineReducers} from \"redux\";\nimport {connectRouter} from 'connected-react-router';\nimport pokemons from './pokemons';\n\nexport default (history) => combineReducers({\n    router: connectRouter(history),\n    pokemons\n});","import update from 'immutability-helper';\nimport actionTypes from '../action-types/pokemons';\n\nconst initialState = {\n    pokemonNames: [],\n    list: [],\n    selectedCard: 0,\n    searchTerm: '',\n    loadingData: false,\n    routeMatch: true\n};\n\nconst pokemons = (state = initialState, action) => {\n    switch (action.type) {\n        case actionTypes.SELECT_CARD:\n            return update(state, {selectedCard: {$set: action.payload.pokemonId}});\n        case actionTypes.SEARCH:\n            return update(state, {searchTerm: {$set: action.payload.value}});\n        case actionTypes.SET_LIST:\n            return update(state, {list: {$set: action.payload.list}});\n        case actionTypes.SET_NAME_LIST:\n            return update(state, {pokemonNames: {$set: action.payload.list}});\n        case actionTypes.LOADING_DATA:\n            return update(state, {loadingData: {$set: action.payload.loading}});\n        case actionTypes.LOADING_NAMES_DATA:\n            return update(state, {loadingNamesData: {$set: action.payload.loading}});\n        case actionTypes.SET_ROUTE_MATCH:\n            return update(state, {routeMatch: {$set: action.payload.routeMatch}});\n        default:\n            return state;\n    }\n};\n\nexport default pokemons;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './sass/pokedex.scss';\nimport {createBrowserHistory} from \"history\";\nimport {applyMiddleware, createStore} from \"redux\";\nimport thunk from \"redux-thunk\";\nimport createRootReducer from './reducers'\nimport {Provider} from \"react-redux\";\nimport {ConnectedRouter, routerMiddleware} from 'connected-react-router';\n\nconst history = createBrowserHistory();\n\nconst store = createStore(createRootReducer(history), applyMiddleware(thunk, routerMiddleware(history)));\n\nReactDOM.render(<Provider store={store}>\n    <ConnectedRouter history={history}>\n        <App />\n    </ConnectedRouter>\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}